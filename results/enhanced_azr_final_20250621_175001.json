{
  "experiment_config": {
    "max_tasks": 50,
    "n_values": [
      1,
      4
    ],
    "max_concurrent": 3,
    "requests_per_minute": 20,
    "progressive_sampling": true,
    "temperature": 0.7,
    "use_chain_of_thought": true,
    "timeout_seconds": 10,
    "memory_limit_mb": 512,
    "exponential_backoff": true,
    "max_retries": 3
  },
  "cycles": 2,
  "total_duration": 2022.9495041370392,
  "cycle_results": {
    "cycle_1": {
      "cycle": 1,
      "timestamp": 1750552392.5638971,
      "duration": 1013.9658641815186,
      "humaneval_results": {
        "bo_1": [
          {
            "task_id": "HumanEval/0",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0031828880310058594)",
            "solutions": [
              "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"
            ]
          },
          {
            "task_id": "HumanEval/1",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0037953853607177734)",
            "solutions": [
              "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    current = []\n    depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            current.append(char)\n        elif char == ')':\n            depth -= 1\n            current.append(char)\n            \n        if depth == 0 and current:\n            result.append(''.join(current))\n            current = []\n            \n    return result"
            ]
          },
          {
            "task_id": "HumanEval/2",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.003244161605834961)",
            "solutions": [
              "def truncate_number(number: float) -> float:\n    return number - int(number)"
            ]
          },
          {
            "task_id": "HumanEval/3",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006368875503540039)",
            "solutions": [
              "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"
            ]
          },
          {
            "task_id": "HumanEval/4",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.003284931182861328)",
            "solutions": [
              "def mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)"
            ]
          },
          {
            "task_id": "HumanEval/5",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0032510757446289062)",
            "solutions": [
              "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers)-1):\n        result.extend([numbers[i], delimeter])\n    result.append(numbers[-1])\n    return result if numbers else []"
            ]
          },
          {
            "task_id": "HumanEval/6",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0038259029388427734)",
            "solutions": [
              "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    \n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    \n    return result"
            ]
          },
          {
            "task_id": "HumanEval/7",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006045818328857422)",
            "solutions": [
              "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"
            ]
          },
          {
            "task_id": "HumanEval/8",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0034592151641845703)",
            "solutions": [
              "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), eval('*'.join(map(str, numbers)) or '1'))"
            ]
          },
          {
            "task_id": "HumanEval/9",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.003690004348754883)",
            "solutions": [
              "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result"
            ]
          },
          {
            "task_id": "HumanEval/10",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006803989410400391)",
            "solutions": [
              "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    \n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    \n    return string + string[:-1][::-1]"
            ]
          },
          {
            "task_id": "HumanEval/11",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.01007533073425293)",
            "solutions": [
              "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"
            ]
          },
          {
            "task_id": "HumanEval/12",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.007271289825439453)",
            "solutions": [
              "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"
            ]
          },
          {
            "task_id": "HumanEval/13",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0023429393768310547)",
            "solutions": [
              "def greatest_common_divisor(a: int, b: int) -> int:\n    a = abs(a)\n    b = abs(b)\n    while b:\n        a, b = b, a % b\n    return a"
            ]
          },
          {
            "task_id": "HumanEval/14",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0037603378295898438)",
            "solutions": [
              "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]"
            ]
          },
          {
            "task_id": "HumanEval/15",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006405830383300781)",
            "solutions": [
              "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))"
            ]
          },
          {
            "task_id": "HumanEval/16",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004703044891357422)",
            "solutions": [
              "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"
            ]
          },
          {
            "task_id": "HumanEval/17",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0066661834716796875)",
            "solutions": [
              "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result"
            ]
          },
          {
            "task_id": "HumanEval/18",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0035352706909179688)",
            "solutions": [
              "def how_many_times(string: str, substring: str) -> int:\n    if not substring or len(string) < len(substring):\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"
            ]
          },
          {
            "task_id": "HumanEval/19",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0029959678649902344)",
            "solutions": [
              "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda x: num_dict[x])\n    return ' '.join(sorted_words)"
            ]
          },
          {
            "task_id": "HumanEval/20",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0031058788299560547)",
            "solutions": [
              "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n    \n    return result"
            ]
          },
          {
            "task_id": "HumanEval/21",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0036270618438720703)",
            "solutions": [
              "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    if range_val == 0:\n        return [0.0] * len(numbers)\n    return [(x - min_val) / range_val for x in numbers]"
            ]
          },
          {
            "task_id": "HumanEval/22",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.08742785453796387)",
            "solutions": [
              "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]"
            ]
          },
          {
            "task_id": "HumanEval/23",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.002315044403076172)",
            "solutions": [
              "def strlen(string: str) -> int:\n    return len(string)"
            ]
          },
          {
            "task_id": "HumanEval/24",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0036509037017822266)",
            "solutions": [
              "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"
            ]
          },
          {
            "task_id": "HumanEval/25",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004452705383300781)",
            "solutions": [
              "def factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n        if d * d > n:\n            if n > 1:\n                factors.append(n)\n            break\n    return factors"
            ]
          },
          {
            "task_id": "HumanEval/26",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0023980140686035156)",
            "solutions": [
              "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]"
            ]
          },
          {
            "task_id": "HumanEval/27",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.003326892852783203)",
            "solutions": [
              "def flip_case(string: str) -> str:\n    return string.swapcase()"
            ]
          },
          {
            "task_id": "HumanEval/28",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0034961700439453125)",
            "solutions": [
              "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"
            ]
          },
          {
            "task_id": "HumanEval/29",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0030150413513183594)",
            "solutions": [
              "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"
            ]
          },
          {
            "task_id": "HumanEval/30",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0034089088439941406)",
            "solutions": [
              "def get_positive(l: list):\n    return [x for x in l if x > 0]"
            ]
          },
          {
            "task_id": "HumanEval/31",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.003732919692993164)",
            "solutions": [
              "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
            ]
          },
          {
            "task_id": "HumanEval/32",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.003434896469116211)",
            "solutions": [
              "def find_zero(xs: list):\n    if len(xs) % 2 != 0 or not xs[-1]:\n        return None\n    \n    left, right = -1, 1\n    while poly(xs, left) * poly(xs, right) > 0:\n        left *= 2\n        right *= 2\n    \n    for _ in range(100):\n        mid = (left + right) / 2\n        if abs(poly(xs, mid)) < 1e-10:\n            return mid\n        if poly(xs, mid) * poly(xs, left) < 0:\n            right = mid\n        else:\n            left = mid\n            \n    return (left + right) / 2"
            ]
          },
          {
            "task_id": "HumanEval/33",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0223388671875)",
            "solutions": [
              "def sort_third(l: list):\n    thirds = sorted([l[i] for i in range(0, len(l), 3)])\n    result = l.copy()\n    for i, val in zip(range(0, len(l), 3), thirds):\n        result[i] = val\n    return result"
            ]
          },
          {
            "task_id": "HumanEval/34",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0035457611083984375)",
            "solutions": [
              "def unique(l: list):\n    return sorted(list(set(l)))"
            ]
          },
          {
            "task_id": "HumanEval/35",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.003437042236328125)",
            "solutions": [
              "def max_element(l: list):\n    if not l:\n        return None\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val"
            ]
          },
          {
            "task_id": "HumanEval/36",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0029900074005126953)",
            "solutions": [
              "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"
            ]
          },
          {
            "task_id": "HumanEval/37",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004074811935424805)",
            "solutions": [
              "def sort_even(l: list):\n    even_indices = l[::2]\n    even_indices.sort()\n    result = l.copy()\n    result[::2] = even_indices\n    return result"
            ]
          },
          {
            "task_id": "HumanEval/38",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.003587961196899414)",
            "solutions": [
              "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
            ]
          },
          {
            "task_id": "HumanEval/39",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.002651691436767578)",
            "solutions": [
              "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def fib():\n        a, b = 0, 1\n        while True:\n            yield b\n            a, b = b, a + b\n    \n    count = 0\n    for num in fib():\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num"
            ]
          },
          {
            "task_id": "HumanEval/40",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004668235778808594)",
            "solutions": [
              "def triples_sum_to_zero(l: list):\n    if len(l) < 3:\n        return False\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
            ]
          },
          {
            "task_id": "HumanEval/41",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0041351318359375)",
            "solutions": [
              "def car_race_collision(n: int):\n    return n * n"
            ]
          },
          {
            "task_id": "HumanEval/42",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.003139019012451172)",
            "solutions": [
              "def incr_list(l: list):\n    return [x + 1 for x in l]"
            ]
          },
          {
            "task_id": "HumanEval/43",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0056018829345703125)",
            "solutions": [
              "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"
            ]
          },
          {
            "task_id": "HumanEval/44",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.00539398193359375)",
            "solutions": [
              "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"
            ]
          },
          {
            "task_id": "HumanEval/45",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.00845026969909668)",
            "solutions": [
              "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2"
            ]
          },
          {
            "task_id": "HumanEval/46",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.003525972366333008)",
            "solutions": [
              "def fib4(n: int):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    \n    a, b, c, d = 0, 2, 0, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d"
            ]
          },
          {
            "task_id": "HumanEval/47",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.00807499885559082)",
            "solutions": [
              "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_list[mid-1] + sorted_list[mid]) / 2\n    return sorted_list[mid]"
            ]
          },
          {
            "task_id": "HumanEval/48",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.009073972702026367)",
            "solutions": [
              "def is_palindrome(text: str):\n    return text == text[::-1]"
            ]
          },
          {
            "task_id": "HumanEval/49",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.005527019500732422)",
            "solutions": [
              "def modp(n: int, p: int):\n    if n == 0:\n        return 1\n    result = 1\n    base = 2\n    while n > 0:\n        if n & 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n >>= 1\n    return result"
            ]
          }
        ],
        "bo_4": [
          {
            "task_id": "HumanEval/0",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.007075071334838867)",
            "solutions": [
              "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
              "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
              "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
              "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"
            ]
          },
          {
            "task_id": "HumanEval/1",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.007520914077758789)",
            "solutions": [
              "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    current_group = \"\"\n    depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            current_group += char\n        elif char == ')':\n            depth -= 1\n            current_group += char\n            if depth == 0:\n                result.append(current_group)\n                current_group = \"\"\n                \n    return result",
              "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    current = []\n    count = 0\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current.append(char)\n        elif char == ')':\n            count -= 1\n            current.append(char)\n            \n        if count == 0 and current:\n            result.append(''.join(current))\n            current = []\n            \n    return result",
              "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    current = []\n    depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            current.append(char)\n        elif char == ')':\n            depth -= 1\n            current.append(char)\n            \n        if depth == 0 and current:\n            result.append(''.join(current))\n            current = []\n            \n    return result",
              "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    current = []\n    count = 0\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current.append(char)\n        elif char == ')':\n            count -= 1\n            current.append(char)\n            \n        if count == 0 and current:\n            result.append(''.join(current))\n            current = []\n            \n    return result"
            ]
          },
          {
            "task_id": "HumanEval/2",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0049839019775390625)",
            "solutions": [
              "def truncate_number(number: float) -> float:\n    return number - int(number)",
              "def truncate_number(number: float) -> float:\n    return number - int(number)",
              "def truncate_number(number: float) -> float:\n    return number - int(number)",
              "def truncate_number(number: float) -> float:\n    return number - int(number)"
            ]
          },
          {
            "task_id": "HumanEval/3",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0036878585815429688)",
            "solutions": [
              "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False",
              "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False",
              "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False",
              "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"
            ]
          },
          {
            "task_id": "HumanEval/4",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.002625703811645508)",
            "solutions": [
              "def mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)",
              "def mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)",
              "def mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)",
              "def mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)"
            ]
          },
          {
            "task_id": "HumanEval/5",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.00412297248840332)",
            "solutions": [
              "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers)-1):\n        result.extend([numbers[i], delimeter])\n    result.append(numbers[-1])\n    return result if numbers else []",
              "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers)-1):\n        result.extend([numbers[i], delimeter])\n    result.append(numbers[-1])\n    return result",
              "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers)-1):\n        result.extend([numbers[i], delimeter])\n    result.append(numbers[-1])\n    return result if numbers else []",
              "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers)-1):\n        result.extend([numbers[i], delimeter])\n    result.append(numbers[-1])\n    return result if numbers else []"
            ]
          },
          {
            "task_id": "HumanEval/6",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004970073699951172)",
            "solutions": [
              "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    \n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    \n    return result",
              "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    \n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            else:\n                depth -= 1\n        result.append(max_depth)\n    \n    return result",
              "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    \n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            else:\n                depth -= 1\n        result.append(max_depth)\n    \n    return result",
              "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    \n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            else:\n                depth -= 1\n        result.append(max_depth)\n    \n    return result"
            ]
          },
          {
            "task_id": "HumanEval/7",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004456996917724609)",
            "solutions": [
              "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]",
              "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]",
              "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]",
              "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"
            ]
          },
          {
            "task_id": "HumanEval/8",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004541158676147461)",
            "solutions": [
              "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), prod(numbers))\n\ndef prod(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result",
              "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = sum(numbers) if numbers else 0\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return (sum_result, product_result)",
              "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), eval('*'.join(map(str, numbers)) or '1'))",
              "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), eval('*'.join(map(str, numbers)) or '1'))"
            ]
          },
          {
            "task_id": "HumanEval/9",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0035898685455322266)",
            "solutions": [
              "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result",
              "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result",
              "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result",
              "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result"
            ]
          },
          {
            "task_id": "HumanEval/10",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.00852203369140625)",
            "solutions": [
              "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    \n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    \n    return string + string[:-1][::-1]",
              "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    \n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    \n    return string + string[:-1][::-1]",
              "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    \n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    \n    return string + string[:-1][::-1]",
              "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]"
            ]
          },
          {
            "task_id": "HumanEval/11",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.008099794387817383)",
            "solutions": [
              "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))",
              "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))",
              "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))",
              "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"
            ]
          },
          {
            "task_id": "HumanEval/12",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0038809776306152344)",
            "solutions": [
              "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)",
              "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)",
              "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)",
              "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"
            ]
          },
          {
            "task_id": "HumanEval/13",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0044019222259521484)",
            "solutions": [
              "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)",
              "def greatest_common_divisor(a: int, b: int) -> int:\n    a, b = abs(a), abs(b)\n    while b:\n        a, b = b, a % b\n    return a",
              "def greatest_common_divisor(a: int, b: int) -> int:\n    a, b = abs(a), abs(b)\n    while b:\n        a, b = b, a % b\n    return a",
              "def greatest_common_divisor(a: int, b: int) -> int:\n    a, b = abs(a), abs(b)\n    while b:\n        a, b = b, a % b\n    return a"
            ]
          },
          {
            "task_id": "HumanEval/14",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004029273986816406)",
            "solutions": [
              "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]",
              "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]",
              "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]",
              "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]"
            ]
          },
          {
            "task_id": "HumanEval/15",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006845951080322266)",
            "solutions": [
              "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))",
              "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))",
              "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))",
              "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))"
            ]
          },
          {
            "task_id": "HumanEval/16",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.005095958709716797)",
            "solutions": [
              "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))",
              "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))",
              "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))",
              "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"
            ]
          },
          {
            "task_id": "HumanEval/17",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004098176956176758)",
            "solutions": [
              "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result",
              "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result",
              "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result",
              "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result"
            ]
          },
          {
            "task_id": "HumanEval/18",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.008991003036499023)",
            "solutions": [
              "def how_many_times(string: str, substring: str) -> int:\n    if not string or not substring:\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
              "def how_many_times(string: str, substring: str) -> int:\n    if not string or not substring:\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
              "def how_many_times(string: str, substring: str) -> int:\n    if not string or not substring:\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
              "def how_many_times(string: str, substring: str) -> int:\n    if not string or not substring:\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"
            ]
          },
          {
            "task_id": "HumanEval/19",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.007807016372680664)",
            "solutions": [
              "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda x: num_dict[x])\n    return ' '.join(sorted_words)",
              "def sort_numbers(numbers: str) -> str:\n    number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                  'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda x: number_dict[x])\n    return ' '.join(sorted_words)",
              "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda x: num_dict[x])\n    return ' '.join(sorted_words)",
              "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda x: num_dict[x])\n    return ' '.join(sorted_words)"
            ]
          },
          {
            "task_id": "HumanEval/20",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.005874156951904297)",
            "solutions": [
              "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    sorted_nums = sorted(numbers)\n    \n    for i in range(len(sorted_nums) - 1):\n        diff = sorted_nums[i + 1] - sorted_nums[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (sorted_nums[i], sorted_nums[i + 1])\n            \n    return result",
              "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    result = None\n    sorted_nums = sorted(numbers)\n    \n    for i in range(len(sorted_nums) - 1):\n        diff = sorted_nums[i + 1] - sorted_nums[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (sorted_nums[i], sorted_nums[i + 1])\n            \n    return result",
              "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    sorted_nums = sorted(numbers)\n    \n    for i in range(len(sorted_nums) - 1):\n        diff = sorted_nums[i + 1] - sorted_nums[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (sorted_nums[i], sorted_nums[i + 1])\n            \n    return result",
              "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    sorted_nums = sorted(numbers)\n    \n    for i in range(len(sorted_nums) - 1):\n        diff = sorted_nums[i + 1] - sorted_nums[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (sorted_nums[i], sorted_nums[i + 1])\n            \n    return result"
            ]
          },
          {
            "task_id": "HumanEval/21",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.005682945251464844)",
            "solutions": [
              "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    if range_val == 0:\n        return [0.0] * len(numbers)\n    return [(x - min_val) / range_val for x in numbers]",
              "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    if range_val == 0:\n        return [0.0] * len(numbers)\n    return [(x - min_val) / range_val for x in numbers]",
              "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    if range_val == 0:\n        return [0.0] * len(numbers)\n    return [(x - min_val) / range_val for x in numbers]",
              "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    if range_val == 0:\n        return [0.0] * len(numbers)\n    return [(x - min_val) / range_val for x in numbers]"
            ]
          },
          {
            "task_id": "HumanEval/22",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006723165512084961)",
            "solutions": [
              "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]",
              "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]",
              "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]",
              "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]"
            ]
          },
          {
            "task_id": "HumanEval/23",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004135847091674805)",
            "solutions": [
              "def strlen(string: str) -> int:\n    return len(string)",
              "def strlen(string: str) -> int:\n    count = 0\n    for _ in string:\n        count += 1\n    return count",
              "def strlen(string: str) -> int:\n    return len(string)",
              "def strlen(string: str) -> int:\n    return len(string)"
            ]
          },
          {
            "task_id": "HumanEval/24",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.007997989654541016)",
            "solutions": [
              "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i",
              "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i",
              "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i",
              "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"
            ]
          },
          {
            "task_id": "HumanEval/25",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.005458831787109375)",
            "solutions": [
              "def factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n        if d * d > n:\n            if n > 1:\n                factors.append(n)\n            break\n    return factors",
              "def factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n        if d * d > n:\n            if n > 1:\n                factors.append(n)\n            break\n    return factors",
              "def factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n        if d * d > n:\n            if n > 1:\n                factors.append(n)\n            break\n    return factors",
              "def factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n        if d * d > n:\n            if n > 1:\n                factors.append(n)\n            break\n    return factors"
            ]
          },
          {
            "task_id": "HumanEval/26",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.01175999641418457)",
            "solutions": [
              "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]",
              "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]",
              "def remove_duplicates(numbers: List[int]) -> List[int]:\n    count_dict = {}\n    for num in numbers:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    return [num for num in numbers if count_dict[num] == 1]",
              "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]"
            ]
          },
          {
            "task_id": "HumanEval/27",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004273891448974609)",
            "solutions": [
              "def flip_case(string: str) -> str:\n    return string.swapcase()",
              "def flip_case(string: str) -> str:\n    return string.swapcase()",
              "def flip_case(string: str) -> str:\n    return string.swapcase()",
              "def flip_case(string: str) -> str:\n    return string.swapcase()"
            ]
          },
          {
            "task_id": "HumanEval/28",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006223917007446289)",
            "solutions": [
              "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)",
              "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)",
              "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)",
              "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"
            ]
          },
          {
            "task_id": "HumanEval/29",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.003414154052734375)",
            "solutions": [
              "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]",
              "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]",
              "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]",
              "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"
            ]
          },
          {
            "task_id": "HumanEval/30",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.005811929702758789)",
            "solutions": [
              "def get_positive(l: list):\n    return [x for x in l if x > 0]",
              "def get_positive(l: list):\n    return [x for x in l if x > 0]",
              "def get_positive(l: list):\n    return [x for x in l if x > 0]",
              "def get_positive(l: list):\n    return [x for x in l if x > 0]"
            ]
          },
          {
            "task_id": "HumanEval/31",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.007435798645019531)",
            "solutions": [
              "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
              "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
              "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
              "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"
            ]
          },
          {
            "task_id": "HumanEval/32",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004457235336303711)",
            "solutions": [
              "def find_zero(xs: list):\n    if len(xs) % 2 != 0 or not xs[-1]:\n        return None\n    \n    left = -1000\n    right = 1000\n    \n    while right - left > 1e-10:\n        mid = (left + right) / 2\n        if poly(xs, mid) * poly(xs, left) <= 0:\n            right = mid\n        else:\n            left = mid\n            \n    return left",
              "def find_zero(xs: list):\n    def f(x):\n        return poly(xs, x)\n    \n    a, b = -20, 20\n    \n    while abs(b - a) > 1e-10:\n        c = (a + b) / 2\n        if f(c) == 0:\n            return c\n        if f(a) * f(c) < 0:\n            b = c\n        else:\n            a = c\n            \n    return (a + b) / 2",
              "def find_zero(xs: list):\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        return None\n    \n    left = -1000\n    right = 1000\n    \n    while abs(right - left) > 1e-10:\n        mid = (left + right) / 2\n        val = poly(xs, mid)\n        \n        if abs(val) < 1e-10:\n            return mid\n        \n        if (val * poly(xs, left)) < 0:\n            right = mid\n        else:\n            left = mid\n            \n    return (left + right) / 2",
              "def find_zero(xs: list):\n    if len(xs) % 2 != 0 or not xs[-1]:\n        raise ValueError(\"Invalid input\")\n    \n    left, right = -1, 1\n    while poly(xs, left) * poly(xs, right) >= 0:\n        left *= 2\n        right *= 2\n    \n    for _ in range(60):\n        mid = (left + right) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        if poly(xs, mid) * poly(xs, left) < 0:\n            right = mid\n        else:\n            left = mid\n            \n    return (left + right) / 2"
            ]
          },
          {
            "task_id": "HumanEval/33",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006494045257568359)",
            "solutions": [
              "def sort_third(l: list):\n    third_indices = [i for i in range(0, len(l), 3)]\n    third_values = sorted([l[i] for i in third_indices])\n    result = l.copy()\n    for idx, val in zip(third_indices, third_values):\n        result[idx] = val\n    return result",
              "def sort_third(l: list):\n    third_indices = l[::3]\n    third_indices.sort()\n    result = l.copy()\n    for i, val in enumerate(third_indices):\n        result[i * 3] = val\n    return result",
              "def sort_third(l: list):\n    third_indices = [i for i in range(0, len(l), 3)]\n    third_values = sorted([l[i] for i in third_indices])\n    result = l.copy()\n    for idx, val in zip(third_indices, third_values):\n        result[idx] = val\n    return result",
              "def sort_third(l: list):\n    third_indices = l[::3]\n    third_indices.sort()\n    result = l.copy()\n    for i, val in enumerate(third_indices):\n        result[i * 3] = val\n    return result"
            ]
          },
          {
            "task_id": "HumanEval/34",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.007678985595703125)",
            "solutions": [
              "def unique(l: list):\n    return sorted(list(set(l)))",
              "def unique(l: list):\n    return sorted(list(set(l)))",
              "def unique(l: list):\n    return sorted(list(set(l)))",
              "def unique(l: list):\n    return sorted(list(set(l)))"
            ]
          },
          {
            "task_id": "HumanEval/35",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.007105112075805664)",
            "solutions": [
              "def max_element(l: list):\n    if not l:\n        return None\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val",
              "def max_element(l: list):\n    max_val = l[0]\n    for num in l[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val",
              "def max_element(l: list):\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val",
              "def max_element(l: list):\n    max_val = l[0]\n    for num in l[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val"
            ]
          },
          {
            "task_id": "HumanEval/36",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.007096052169799805)",
            "solutions": [
              "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count",
              "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count",
              "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count",
              "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"
            ]
          },
          {
            "task_id": "HumanEval/37",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.008165836334228516)",
            "solutions": [
              "def sort_even(l: list):\n    even_indices = l[::2]\n    even_indices.sort()\n    result = list(l)\n    result[::2] = even_indices\n    return result",
              "def sort_even(l: list):\n    even_indices = l[::2]\n    sorted_even = sorted(even_indices)\n    result = l.copy()\n    result[::2] = sorted_even\n    return result",
              "def sort_even(l: list):\n    even_indices = l[::2]\n    even_indices.sort()\n    result = list(l)\n    result[::2] = even_indices\n    return result",
              "def sort_even(l: list):\n    even_indices = l[::2]\n    even_indices.sort()\n    result = l.copy()\n    for i, val in enumerate(even_indices):\n        result[i*2] = val\n    return result"
            ]
          },
          {
            "task_id": "HumanEval/38",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.008207082748413086)",
            "solutions": [
              "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
              "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
              "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
              "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
            ]
          },
          {
            "task_id": "HumanEval/39",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.005223989486694336)",
            "solutions": [
              "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def fib():\n        a, b = 0, 1\n        while True:\n            yield b\n            a, b = b, a + b\n    \n    count = 0\n    for num in fib():\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num",
              "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield b\n            a, b = b, a + b\n\n    count = 0\n    for num in fib():\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num",
              "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def fib():\n        a, b = 0, 1\n        while True:\n            yield b\n            a, b = b, a + b\n    \n    count = 0\n    for num in fib():\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num",
              "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci():\n        a, b = 0, 1\n        while True:\n            yield b\n            a, b = b, a + b\n\n    count = 0\n    for fib in fibonacci():\n        if is_prime(fib):\n            count += 1\n            if count == n:\n                return fib"
            ]
          },
          {
            "task_id": "HumanEval/40",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006349802017211914)",
            "solutions": [
              "def triples_sum_to_zero(l: list):\n    if len(l) < 3:\n        return False\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
              "def triples_sum_to_zero(l: list):\n    if len(l) < 3:\n        return False\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
              "def triples_sum_to_zero(l: list):\n    if len(l) < 3:\n        return False\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
              "def triples_sum_to_zero(l: list):\n    if len(l) < 3:\n        return False\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
            ]
          },
          {
            "task_id": "HumanEval/41",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.005545139312744141)",
            "solutions": [
              "def car_race_collision(n: int):\n    return n * n",
              "def car_race_collision(n: int):\n    return n * n",
              "def car_race_collision(n: int):\n    return n * n",
              "def car_race_collision(n: int):\n    return n * n"
            ]
          },
          {
            "task_id": "HumanEval/42",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006105899810791016)",
            "solutions": [
              "def incr_list(l: list):\n    return [x + 1 for x in l]",
              "def incr_list(l: list):\n    return [x + 1 for x in l]",
              "def incr_list(l: list):\n    return [x + 1 for x in l]",
              "def incr_list(l: list):\n    return [x + 1 for x in l]"
            ]
          },
          {
            "task_id": "HumanEval/43",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0058553218841552734)",
            "solutions": [
              "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
              "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
              "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
              "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"
            ]
          },
          {
            "task_id": "HumanEval/44",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006350040435791016)",
            "solutions": [
              "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result",
              "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])",
              "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result",
              "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    num = x\n    while num > 0:\n        result = str(num % base) + result\n        num //= base\n    return result"
            ]
          },
          {
            "task_id": "HumanEval/45",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.009723186492919922)",
            "solutions": [
              "def triangle_area(a, h):\n    return (a * h) / 2",
              "def triangle_area(a, h):\n    return (a * h) / 2",
              "def triangle_area(a, h):\n    return (a * h) / 2",
              "def triangle_area(a, h):\n    return (a * h) / 2"
            ]
          },
          {
            "task_id": "HumanEval/46",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.009458780288696289)",
            "solutions": [
              "def fib4(n: int):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    \n    a, b, c, d = 0, 2, 0, 4\n    for _ in range(4, n):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d",
              "def fib4(n: int):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    \n    a, b, c, d = 0, 2, 0, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d",
              "def fib4(n: int):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    \n    a, b, c, d = 0, 2, 0, 4\n    for _ in range(4, n):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d",
              "def fib4(n: int):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    \n    f = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        next_val = sum(f)\n        f[0], f[1], f[2], f[3] = f[1], f[2], f[3], next_val\n    \n    return f[3]"
            ]
          },
          {
            "task_id": "HumanEval/47",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0048940181732177734)",
            "solutions": [
              "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]",
              "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n    else:\n        return sorted_l[n//2]",
              "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]",
              "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n    else:\n        return sorted_l[n//2]"
            ]
          },
          {
            "task_id": "HumanEval/48",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.00615692138671875)",
            "solutions": [
              "def is_palindrome(text: str):\n    text = text.lower()\n    return text == text[::-1]",
              "def is_palindrome(text: str):\n    return text == text[::-1]",
              "def is_palindrome(text: str):\n    text = text.lower()\n    return text == text[::-1]",
              "def is_palindrome(text: str):\n    return text == text[::-1]"
            ]
          },
          {
            "task_id": "HumanEval/49",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.008281230926513672)",
            "solutions": [
              "def modp(n: int, p: int):\n    result = 1\n    base = 2\n    while n > 0:\n        if n & 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n >>= 1\n    return result",
              "def modp(n: int, p: int):\n    result = 1\n    base = 2\n    while n > 0:\n        if n & 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n >>= 1\n    return result",
              "def modp(n: int, p: int):\n    result = 1\n    power = 2\n    while n > 0:\n        if n & 1:\n            result = (result * power) % p\n        power = (power * power) % p\n        n >>= 1\n    return result",
              "def modp(n: int, p: int):\n    if n == 0:\n        return 1\n    result = 1\n    base = 2\n    while n > 0:\n        if n & 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n >>= 1\n    return result"
            ]
          }
        ]
      },
      "metrics": {
        "pass_at_1_n1": 0.0,
        "avg_ratio_n1": 0.0,
        "avg_passed_n1": 0.0,
        "avg_total_n1": 1.0,
        "pass_at_1_n4": 0.0,
        "avg_ratio_n4": 0.0,
        "avg_passed_n4": 0.0,
        "avg_total_n4": 1.0,
        "best_pass_at_1": 0.0
      }
    },
    "cycle_2": {
      "cycle": 2,
      "timestamp": 1750553401.545279,
      "duration": 1008.9797329902649,
      "humaneval_results": {
        "bo_1": [
          {
            "task_id": "HumanEval/0",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.007617950439453125)",
            "solutions": [
              "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"
            ]
          },
          {
            "task_id": "HumanEval/1",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004585981369018555)",
            "solutions": [
              "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    current = []\n    count = 0\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current.append(char)\n        elif char == ')':\n            count -= 1\n            current.append(char)\n            \n        if count == 0 and current:\n            result.append(''.join(current))\n            current = []\n            \n    return result"
            ]
          },
          {
            "task_id": "HumanEval/2",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0074880123138427734)",
            "solutions": [
              "def truncate_number(number: float) -> float:\n    return number - int(number)"
            ]
          },
          {
            "task_id": "HumanEval/3",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.009917736053466797)",
            "solutions": [
              "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"
            ]
          },
          {
            "task_id": "HumanEval/4",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006834983825683594)",
            "solutions": [
              "def mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)"
            ]
          },
          {
            "task_id": "HumanEval/5",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.005074977874755859)",
            "solutions": [
              "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers)-1):\n        result.extend([numbers[i], delimeter])\n    result.append(numbers[-1])\n    return result if numbers else []"
            ]
          },
          {
            "task_id": "HumanEval/6",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.010144948959350586)",
            "solutions": [
              "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    \n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            else:\n                depth -= 1\n        result.append(max_depth)\n    \n    return result"
            ]
          },
          {
            "task_id": "HumanEval/7",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006326198577880859)",
            "solutions": [
              "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"
            ]
          },
          {
            "task_id": "HumanEval/8",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006431102752685547)",
            "solutions": [
              "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), eval('*'.join(map(str, numbers)) or '1'))"
            ]
          },
          {
            "task_id": "HumanEval/9",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.027662038803100586)",
            "solutions": [
              "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result"
            ]
          },
          {
            "task_id": "HumanEval/10",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.003425121307373047)",
            "solutions": [
              "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    \n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    \n    return string + string[:-1][::-1]"
            ]
          },
          {
            "task_id": "HumanEval/11",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.010086297988891602)",
            "solutions": [
              "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"
            ]
          },
          {
            "task_id": "HumanEval/12",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.008066177368164062)",
            "solutions": [
              "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"
            ]
          },
          {
            "task_id": "HumanEval/13",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.003730297088623047)",
            "solutions": [
              "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)"
            ]
          },
          {
            "task_id": "HumanEval/14",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.009058952331542969)",
            "solutions": [
              "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]"
            ]
          },
          {
            "task_id": "HumanEval/15",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004143953323364258)",
            "solutions": [
              "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))"
            ]
          },
          {
            "task_id": "HumanEval/16",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.008862972259521484)",
            "solutions": [
              "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"
            ]
          },
          {
            "task_id": "HumanEval/17",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.007270097732543945)",
            "solutions": [
              "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result"
            ]
          },
          {
            "task_id": "HumanEval/18",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.01211094856262207)",
            "solutions": [
              "def how_many_times(string: str, substring: str) -> int:\n    if not string or not substring:\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"
            ]
          },
          {
            "task_id": "HumanEval/19",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.009011268615722656)",
            "solutions": [
              "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda x: num_dict[x])\n    return ' '.join(sorted_words)"
            ]
          },
          {
            "task_id": "HumanEval/20",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.007706165313720703)",
            "solutions": [
              "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    sorted_nums = sorted(numbers)\n    \n    for i in range(len(sorted_nums) - 1):\n        diff = sorted_nums[i + 1] - sorted_nums[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (sorted_nums[i], sorted_nums[i + 1])\n    \n    return result"
            ]
          },
          {
            "task_id": "HumanEval/21",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.003983259201049805)",
            "solutions": [
              "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    if range_val == 0:\n        return [0.0] * len(numbers)\n    return [(x - min_val) / range_val for x in numbers]"
            ]
          },
          {
            "task_id": "HumanEval/22",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.005029916763305664)",
            "solutions": [
              "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]"
            ]
          },
          {
            "task_id": "HumanEval/23",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0045130252838134766)",
            "solutions": [
              "def strlen(string: str) -> int:\n    return len(string)"
            ]
          },
          {
            "task_id": "HumanEval/24",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.005336761474609375)",
            "solutions": [
              "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"
            ]
          },
          {
            "task_id": "HumanEval/25",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.009377002716064453)",
            "solutions": [
              "def factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n        if d * d > n:\n            if n > 1:\n                factors.append(n)\n            break\n    return factors"
            ]
          },
          {
            "task_id": "HumanEval/26",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.005433797836303711)",
            "solutions": [
              "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]"
            ]
          },
          {
            "task_id": "HumanEval/27",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0028738975524902344)",
            "solutions": [
              "def flip_case(string: str) -> str:\n    return string.swapcase()"
            ]
          },
          {
            "task_id": "HumanEval/28",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.009119033813476562)",
            "solutions": [
              "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"
            ]
          },
          {
            "task_id": "HumanEval/29",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.007003307342529297)",
            "solutions": [
              "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"
            ]
          },
          {
            "task_id": "HumanEval/30",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004194974899291992)",
            "solutions": [
              "def get_positive(l: list):\n    return [x for x in l if x > 0]"
            ]
          },
          {
            "task_id": "HumanEval/31",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.03421282768249512)",
            "solutions": [
              "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"
            ]
          },
          {
            "task_id": "HumanEval/32",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.009843111038208008)",
            "solutions": [
              "def find_zero(xs: list):\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        return None\n    \n    left = -1000\n    right = 1000\n    \n    while right - left > 1e-10:\n        mid = (left + right) / 2\n        val = poly(xs, mid)\n        \n        if abs(val) < 1e-10:\n            return mid\n        \n        if (val * poly(xs, left)) < 0:\n            right = mid\n        else:\n            left = mid\n            \n    return (left + right) / 2"
            ]
          },
          {
            "task_id": "HumanEval/33",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.011999130249023438)",
            "solutions": [
              "def sort_third(l: list):\n    third_indices = [i for i in range(0, len(l), 3)]\n    third_values = sorted([l[i] for i in third_indices])\n    result = l.copy()\n    for idx, val in zip(third_indices, third_values):\n        result[idx] = val\n    return result"
            ]
          },
          {
            "task_id": "HumanEval/34",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.011810064315795898)",
            "solutions": [
              "def unique(l: list):\n    return sorted(list(set(l)))"
            ]
          },
          {
            "task_id": "HumanEval/35",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.011687278747558594)",
            "solutions": [
              "def max_element(l: list):\n    max_val = l[0]\n    for item in l:\n        if item > max_val:\n            max_val = item\n    return max_val"
            ]
          },
          {
            "task_id": "HumanEval/36",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004731893539428711)",
            "solutions": [
              "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"
            ]
          },
          {
            "task_id": "HumanEval/37",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.008676767349243164)",
            "solutions": [
              "def sort_even(l: list):\n    even_indices = l[::2]\n    even_indices.sort()\n    result = l.copy()\n    result[::2] = even_indices\n    return result"
            ]
          },
          {
            "task_id": "HumanEval/38",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.008330821990966797)",
            "solutions": [
              "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
            ]
          },
          {
            "task_id": "HumanEval/39",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.003664731979370117)",
            "solutions": [
              "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def fib():\n        a, b = 0, 1\n        while True:\n            yield b\n            a, b = b, a + b\n    \n    count = 0\n    for num in fib():\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num"
            ]
          },
          {
            "task_id": "HumanEval/40",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.012908935546875)",
            "solutions": [
              "def triples_sum_to_zero(l: list):\n    if len(l) < 3:\n        return False\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
            ]
          },
          {
            "task_id": "HumanEval/41",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.008668184280395508)",
            "solutions": [
              "def car_race_collision(n: int):\n    return n * n"
            ]
          },
          {
            "task_id": "HumanEval/42",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.008605003356933594)",
            "solutions": [
              "def incr_list(l: list):\n    return [x + 1 for x in l]"
            ]
          },
          {
            "task_id": "HumanEval/43",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004918098449707031)",
            "solutions": [
              "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"
            ]
          },
          {
            "task_id": "HumanEval/44",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006654024124145508)",
            "solutions": [
              "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    num = abs(x)\n    while num > 0:\n        result = str(num % base) + result\n        num //= base\n    return '-' + result if x < 0 else result"
            ]
          },
          {
            "task_id": "HumanEval/45",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.010928153991699219)",
            "solutions": [
              "def triangle_area(a, h):\n    return (a * h) / 2"
            ]
          },
          {
            "task_id": "HumanEval/46",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.007825136184692383)",
            "solutions": [
              "def fib4(n: int):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    \n    a, b, c, d = 0, 2, 0, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d"
            ]
          },
          {
            "task_id": "HumanEval/47",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.007253885269165039)",
            "solutions": [
              "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]"
            ]
          },
          {
            "task_id": "HumanEval/48",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.009055852890014648)",
            "solutions": [
              "def is_palindrome(text: str):\n    return text == text[::-1]"
            ]
          },
          {
            "task_id": "HumanEval/49",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.00952005386352539)",
            "solutions": [
              "def modp(n: int, p: int):\n    if n == 0:\n        return 1\n    result = 1\n    base = 2\n    while n > 0:\n        if n & 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n >>= 1\n    return result"
            ]
          }
        ],
        "bo_4": [
          {
            "task_id": "HumanEval/0",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004750251770019531)",
            "solutions": [
              "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
              "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
              "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
              "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"
            ]
          },
          {
            "task_id": "HumanEval/1",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.008408069610595703)",
            "solutions": [
              "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    current = []\n    count = 0\n    \n    for char in paren_string:\n        if count == 0 and current:\n            result.append(\"\".join(current))\n            current = []\n        \n        current.append(char)\n        \n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n            \n    if current:\n        result.append(\"\".join(current))\n        \n    return result",
              "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    current = []\n    count = 0\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current.append(char)\n        elif char == ')':\n            count -= 1\n            current.append(char)\n            \n        if count == 0 and current:\n            result.append(''.join(current))\n            current = []\n            \n    return result",
              "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    current_group = \"\"\n    depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            current_group += char\n        elif char == ')':\n            depth -= 1\n            current_group += char\n            if depth == 0:\n                result.append(current_group)\n                current_group = \"\"\n                \n    return result",
              "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    current_string = \"\"\n    count = 0\n    \n    for char in paren_string:\n        current_string += char\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        \n        if count == 0 and current_string:\n            result.append(current_string)\n            current_string = \"\"\n            \n    return result"
            ]
          },
          {
            "task_id": "HumanEval/2",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.008086204528808594)",
            "solutions": [
              "def truncate_number(number: float) -> float:\n    return number - int(number)",
              "def truncate_number(number: float) -> float:\n    return number - int(number)",
              "def truncate_number(number: float) -> float:\n    return number - int(number)",
              "def truncate_number(number: float) -> float:\n    return number - int(number)"
            ]
          },
          {
            "task_id": "HumanEval/3",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.00893712043762207)",
            "solutions": [
              "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False",
              "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False",
              "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False",
              "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"
            ]
          },
          {
            "task_id": "HumanEval/4",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.007751941680908203)",
            "solutions": [
              "def mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)",
              "def mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)",
              "def mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)",
              "def mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)"
            ]
          },
          {
            "task_id": "HumanEval/5",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.01129603385925293)",
            "solutions": [
              "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers)-1):\n        result.extend([numbers[i], delimeter])\n    result.append(numbers[-1])\n    return result if numbers else []",
              "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimeter])\n    result.append(numbers[-1])\n    return result",
              "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers)-1):\n        result.extend([numbers[i], delimeter])\n    result.append(numbers[-1])\n    return result",
              "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers)-1):\n        result.extend([numbers[i], delimeter])\n    result.append(numbers[-1])\n    return result if numbers else []"
            ]
          },
          {
            "task_id": "HumanEval/6",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.011793136596679688)",
            "solutions": [
              "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    \n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    \n    return result",
              "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    \n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            else:\n                depth -= 1\n        result.append(max_depth)\n    \n    return result",
              "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    \n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n        \n    return result",
              "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    \n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    \n    return result"
            ]
          },
          {
            "task_id": "HumanEval/7",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.008727073669433594)",
            "solutions": [
              "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]",
              "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]",
              "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]",
              "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"
            ]
          },
          {
            "task_id": "HumanEval/8",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0074710845947265625)",
            "solutions": [
              "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), eval('*'.join(map(str, numbers))) if numbers else 1)",
              "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), eval('*'.join(map(str, numbers)) or '1'))",
              "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), eval('*'.join(map(str, numbers))) if numbers else 1)",
              "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), eval('*'.join(map(str, numbers)) or '1'))"
            ]
          },
          {
            "task_id": "HumanEval/9",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.00894618034362793)",
            "solutions": [
              "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result",
              "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result",
              "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result",
              "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result"
            ]
          },
          {
            "task_id": "HumanEval/10",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0034308433532714844)",
            "solutions": [
              "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    \n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    \n    return string + string[:-1][::-1]",
              "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    if is_palindrome(string):\n        return string\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]",
              "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    \n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    \n    return string + string[:-1][::-1]",
              "def make_palindrome(string: str) -> str:\n    if not string:\n        return \"\"\n    \n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    \n    return string + string[:-1][::-1]"
            ]
          },
          {
            "task_id": "HumanEval/11",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0087890625)",
            "solutions": [
              "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))",
              "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))",
              "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))",
              "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"
            ]
          },
          {
            "task_id": "HumanEval/12",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006829977035522461)",
            "solutions": [
              "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)",
              "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)",
              "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)",
              "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"
            ]
          },
          {
            "task_id": "HumanEval/13",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006846904754638672)",
            "solutions": [
              "def greatest_common_divisor(a: int, b: int) -> int:\n    a, b = abs(a), abs(b)\n    while b:\n        a, b = b, a % b\n    return a",
              "def greatest_common_divisor(a: int, b: int) -> int:\n    a = abs(a)\n    b = abs(b)\n    while b:\n        a, b = b, a % b\n    return a",
              "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)",
              "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)"
            ]
          },
          {
            "task_id": "HumanEval/14",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.00795888900756836)",
            "solutions": [
              "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]",
              "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]",
              "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]",
              "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]"
            ]
          },
          {
            "task_id": "HumanEval/15",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.007345914840698242)",
            "solutions": [
              "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))",
              "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))",
              "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))",
              "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))"
            ]
          },
          {
            "task_id": "HumanEval/16",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.009006023406982422)",
            "solutions": [
              "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))",
              "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))",
              "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))",
              "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"
            ]
          },
          {
            "task_id": "HumanEval/17",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004312753677368164)",
            "solutions": [
              "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result",
              "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result",
              "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result",
              "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result"
            ]
          },
          {
            "task_id": "HumanEval/18",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.010168075561523438)",
            "solutions": [
              "def how_many_times(string: str, substring: str) -> int:\n    if not substring or len(substring) > len(string):\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
              "def how_many_times(string: str, substring: str) -> int:\n    if not substring or len(substring) > len(string):\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
              "def how_many_times(string: str, substring: str) -> int:\n    if not string or not substring:\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
              "def how_many_times(string: str, substring: str) -> int:\n    if not string or not substring:\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"
            ]
          },
          {
            "task_id": "HumanEval/19",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0056912899017333984)",
            "solutions": [
              "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda x: num_dict[x])\n    return ' '.join(sorted_words)",
              "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda x: num_dict[x])\n    return ' '.join(sorted_words)",
              "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda x: num_dict[x])\n    return ' '.join(sorted_words)",
              "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda x: num_dict[x])\n    return ' '.join(sorted_words)"
            ]
          },
          {
            "task_id": "HumanEval/20",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.009068965911865234)",
            "solutions": [
              "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    sorted_nums = sorted(numbers)\n    \n    for i in range(len(sorted_nums) - 1):\n        diff = sorted_nums[i + 1] - sorted_nums[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (sorted_nums[i], sorted_nums[i + 1])\n            \n    return result",
              "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    result = None\n    sorted_nums = sorted(numbers)\n    \n    for i in range(len(sorted_nums) - 1):\n        diff = sorted_nums[i + 1] - sorted_nums[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (sorted_nums[i], sorted_nums[i + 1])\n    \n    return result",
              "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    sorted_nums = sorted(numbers)\n    \n    for i in range(len(sorted_nums) - 1):\n        diff = sorted_nums[i + 1] - sorted_nums[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (sorted_nums[i], sorted_nums[i + 1])\n    \n    return result",
              "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    sorted_nums = sorted(numbers)\n    \n    for i in range(len(sorted_nums) - 1):\n        diff = sorted_nums[i + 1] - sorted_nums[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (sorted_nums[i], sorted_nums[i + 1])\n            \n    return result"
            ]
          },
          {
            "task_id": "HumanEval/21",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006678104400634766)",
            "solutions": [
              "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    if range_val == 0:\n        return [0.0] * len(numbers)\n    return [(x - min_val) / range_val for x in numbers]",
              "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers] if range_val != 0 else [0.0] * len(numbers)",
              "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    if range_val == 0:\n        return [0.0] * len(numbers)\n    return [(x - min_val) / range_val for x in numbers]",
              "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers] if range_val != 0 else [0.0] * len(numbers)"
            ]
          },
          {
            "task_id": "HumanEval/22",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.009065866470336914)",
            "solutions": [
              "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]",
              "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int) and not isinstance(x, bool)]",
              "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]",
              "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]"
            ]
          },
          {
            "task_id": "HumanEval/23",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.012221813201904297)",
            "solutions": [
              "def strlen(string: str) -> int:\n    count = 0\n    for _ in string:\n        count += 1\n    return count",
              "def strlen(string: str) -> int:\n    return len(string)",
              "def strlen(string: str) -> int:\n    return len(string)",
              "def strlen(string: str) -> int:\n    return len(string)"
            ]
          },
          {
            "task_id": "HumanEval/24",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004559993743896484)",
            "solutions": [
              "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i",
              "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i",
              "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i",
              "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"
            ]
          },
          {
            "task_id": "HumanEval/25",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.003342866897583008)",
            "solutions": [
              "def factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n        if d * d > n:\n            if n > 1:\n                factors.append(n)\n            break\n    return factors",
              "def factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n        if d * d > n:\n            if n > 1:\n                factors.append(n)\n                break\n    return factors",
              "def factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n        if d * d > n:\n            if n > 1:\n                factors.append(n)\n                break\n    return factors",
              "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n            break\n    return factors"
            ]
          },
          {
            "task_id": "HumanEval/26",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.00904989242553711)",
            "solutions": [
              "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]",
              "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = {}\n    for num in numbers:\n        seen[num] = seen.get(num, 0) + 1\n    return [num for num in numbers if seen[num] == 1]",
              "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]",
              "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]"
            ]
          },
          {
            "task_id": "HumanEval/27",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0045928955078125)",
            "solutions": [
              "def flip_case(string: str) -> str:\n    return string.swapcase()",
              "def flip_case(string: str) -> str:\n    return string.swapcase()",
              "def flip_case(string: str) -> str:\n    return string.swapcase()",
              "def flip_case(string: str) -> str:\n    return string.swapcase()"
            ]
          },
          {
            "task_id": "HumanEval/28",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.003409147262573242)",
            "solutions": [
              "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)",
              "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)",
              "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)",
              "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"
            ]
          },
          {
            "task_id": "HumanEval/29",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006120204925537109)",
            "solutions": [
              "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]",
              "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]",
              "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]",
              "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"
            ]
          },
          {
            "task_id": "HumanEval/30",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006604671478271484)",
            "solutions": [
              "def get_positive(l: list):\n    return [x for x in l if x > 0]",
              "def get_positive(l: list):\n    return [x for x in l if x > 0]",
              "def get_positive(l: list):\n    return [x for x in l if x > 0]",
              "def get_positive(l: list):\n    return [x for x in l if x > 0]"
            ]
          },
          {
            "task_id": "HumanEval/31",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006073951721191406)",
            "solutions": [
              "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
              "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
              "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
              "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"
            ]
          },
          {
            "task_id": "HumanEval/32",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.008352994918823242)",
            "solutions": [
              "def find_zero(xs: list):\n    if len(xs) % 2 != 0 or not xs[-1]:\n        raise ValueError\n    a, b = -1, 1\n    while poly(xs, a) * poly(xs, b) > 0:\n        if abs(poly(xs, a)) > abs(poly(xs, b)):\n            b *= 2\n        else:\n            a *= 2\n    for _ in range(100):\n        mid = (a + b) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        if poly(xs, a) * poly(xs, mid) < 0:\n            b = mid\n        else:\n            a = mid\n    return (a + b) / 2",
              "def find_zero(xs: list):\n    if len(xs) % 2 != 0 or not xs[-1]:\n        return None\n    \n    left = -1000\n    right = 1000\n    \n    while abs(right - left) > 1e-10:\n        mid = (left + right) / 2\n        val = poly(xs, mid)\n        \n        if abs(val) < 1e-10:\n            return mid\n            \n        if val * poly(xs, left) < 0:\n            right = mid\n        else:\n            left = mid\n            \n    return (left + right) / 2",
              "def find_zero(xs: list):\n    assert len(xs) % 2 == 0\n    assert xs[-1] != 0\n    left = -1000\n    right = 1000\n    while abs(right - left) > 1e-10:\n        mid = (left + right) / 2\n        if poly(xs, mid) * poly(xs, left) <= 0:\n            right = mid\n        else:\n            left = mid\n    return left",
              "def find_zero(xs: list):\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        return None\n    \n    left = -1000\n    right = 1000\n    \n    while right - left > 1e-10:\n        mid = (left + right) / 2\n        val = poly(xs, mid)\n        \n        if abs(val) < 1e-10:\n            return mid\n        \n        if (val * poly(xs, left)) < 0:\n            right = mid\n        else:\n            left = mid\n            \n    return (left + right) / 2"
            ]
          },
          {
            "task_id": "HumanEval/33",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006103038787841797)",
            "solutions": [
              "def sort_third(l: list):\n    thirds = sorted([l[i] for i in range(0, len(l), 3)])\n    result = l.copy()\n    for i, val in zip(range(0, len(l), 3), thirds):\n        result[i] = val\n    return result",
              "def sort_third(l: list):\n    third_indices = [i for i in range(0, len(l), 3)]\n    third_values = sorted([l[i] for i in third_indices])\n    result = l.copy()\n    for i, v in zip(third_indices, third_values):\n        result[i] = v\n    return result",
              "def sort_third(l: list):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = sorted([l[i] for i in third_indices])\n    result = l.copy()\n    for idx, val in zip(third_indices, third_values):\n        result[idx] = val\n    return result",
              "def sort_third(l: list):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = sorted([l[i] for i in third_indices])\n    result = l.copy()\n    for idx, val in zip(third_indices, third_values):\n        result[idx] = val\n    return result"
            ]
          },
          {
            "task_id": "HumanEval/34",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.00957489013671875)",
            "solutions": [
              "def unique(l: list):\n    return sorted(list(set(l)))",
              "def unique(l: list):\n    return sorted(list(set(l)))",
              "def unique(l: list):\n    return sorted(list(set(l)))",
              "def unique(l: list):\n    return sorted(list(set(l)))"
            ]
          },
          {
            "task_id": "HumanEval/35",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.005473136901855469)",
            "solutions": [
              "def max_element(l: list):\n    if not l:\n        return None\n    max_val = l[0]\n    for num in l[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val",
              "def max_element(l: list):\n    if not l:\n        return None\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val",
              "def max_element(l: list):\n    if not l:\n        return None\n    max_val = l[0]\n    for num in l[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val",
              "def max_element(l: list):\n    max_val = l[0]\n    for num in l[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val"
            ]
          },
          {
            "task_id": "HumanEval/36",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004422187805175781)",
            "solutions": [
              "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count",
              "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count",
              "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count",
              "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"
            ]
          },
          {
            "task_id": "HumanEval/37",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.0041921138763427734)",
            "solutions": [
              "def sort_even(l: list):\n    even_indices = l[::2]\n    even_indices.sort()\n    result = list(l)\n    result[::2] = even_indices\n    return result",
              "def sort_even(l: list):\n    even_indices = l[::2]\n    even_indices.sort()\n    result = l.copy()\n    for i, val in enumerate(even_indices):\n        result[i*2] = val\n    return result",
              "def sort_even(l: list):\n    even_indices = l[::2]\n    even_indices.sort()\n    result = l.copy()\n    for i, val in enumerate(even_indices):\n        result[i*2] = val\n    return result",
              "def sort_even(l: list):\n    even_indices = l[::2]\n    even_indices.sort()\n    result = l.copy()\n    for i, val in enumerate(even_indices):\n        result[i*2] = val\n    return result"
            ]
          },
          {
            "task_id": "HumanEval/38",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.010120868682861328)",
            "solutions": [
              "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
              "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[2] + group[0:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
              "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
              "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
            ]
          },
          {
            "task_id": "HumanEval/39",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.008026838302612305)",
            "solutions": [
              "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for num in fib():\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num",
              "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n    \n    count = 0\n    for num in fib():\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num",
              "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def fib():\n        a, b = 0, 1\n        while True:\n            yield b\n            a, b = b, a + b\n    \n    count = 0\n    for num in fib():\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num",
              "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n    \n    count = 0\n    for num in fib():\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num"
            ]
          },
          {
            "task_id": "HumanEval/40",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.012810945510864258)",
            "solutions": [
              "def triples_sum_to_zero(l: list):\n    if len(l) < 3:\n        return False\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
              "def triples_sum_to_zero(l: list):\n    if len(l) < 3:\n        return False\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
              "def triples_sum_to_zero(l: list):\n    if len(l) < 3:\n        return False\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
              "def triples_sum_to_zero(l: list):\n    if len(l) < 3:\n        return False\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
            ]
          },
          {
            "task_id": "HumanEval/41",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.008419036865234375)",
            "solutions": [
              "def car_race_collision(n: int):\n    return n * n",
              "def car_race_collision(n: int):\n    return n * n",
              "def car_race_collision(n: int):\n    return n * n",
              "def car_race_collision(n: int):\n    return n * n"
            ]
          },
          {
            "task_id": "HumanEval/42",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.006760835647583008)",
            "solutions": [
              "def incr_list(l: list):\n    return [x + 1 for x in l]",
              "def incr_list(l: list):\n    return [x + 1 for x in l]",
              "def incr_list(l: list):\n    return [x + 1 for x in l]",
              "def incr_list(l: list):\n    return [x + 1 for x in l]"
            ]
          },
          {
            "task_id": "HumanEval/43",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.009351968765258789)",
            "solutions": [
              "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False",
              "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False",
              "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
              "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"
            ]
          },
          {
            "task_id": "HumanEval/44",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.010162353515625)",
            "solutions": [
              "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    num = abs(x)\n    while num > 0:\n        result = str(num % base) + result\n        num //= base\n    return '-' + result if x < 0 else result",
              "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])",
              "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result",
              "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result"
            ]
          },
          {
            "task_id": "HumanEval/45",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.010659933090209961)",
            "solutions": [
              "def triangle_area(a, h):\n    return (a * h) / 2",
              "def triangle_area(a, h):\n    return (a * h) / 2",
              "def triangle_area(a, h):\n    return (a * h) / 2",
              "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2"
            ]
          },
          {
            "task_id": "HumanEval/46",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.012250900268554688)",
            "solutions": [
              "def fib4(n: int):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    \n    a, b, c, d = 0, 2, 0, 4\n    for _ in range(4, n):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d",
              "def fib4(n: int):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    \n    a, b, c, d = 0, 2, 0, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d",
              "def fib4(n: int):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n <= 3:\n        return 2 if n == 2 else 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d",
              "def fib4(n: int):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    \n    a, b, c, d = 0, 2, 0, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, (a + b + c + d)\n    \n    return d"
            ]
          },
          {
            "task_id": "HumanEval/47",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.00922703742980957)",
            "solutions": [
              "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]",
              "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2-1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]",
              "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]",
              "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]"
            ]
          },
          {
            "task_id": "HumanEval/48",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.004902839660644531)",
            "solutions": [
              "def is_palindrome(text: str):\n    text = text.lower()\n    return text == text[::-1]",
              "def is_palindrome(text: str):\n    text = text.lower()\n    return text == text[::-1]",
              "def is_palindrome(text: str):\n    return text == text[::-1]",
              "def is_palindrome(text: str):\n    return text == text[::-1]"
            ]
          },
          {
            "task_id": "HumanEval/49",
            "result": "ExecutionResult(passed=0, total=1, ratio=0.0, error='Exception occurred in preexec_fn.', execution_time=0.017832040786743164)",
            "solutions": [
              "def modp(n: int, p: int):\n    result = 1\n    base = 2\n    while n > 0:\n        if n & 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n >>= 1\n    return result",
              "def modp(n: int, p: int):\n    result = 1\n    power = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * power) % p\n        power = (power * power) % p\n        n //= 2\n    return result",
              "def modp(n: int, p: int):\n    result = 1\n    base = 2\n    while n > 0:\n        if n & 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n >>= 1\n    return result",
              "def modp(n: int, p: int):\n    result = 1\n    base = 2\n    while n > 0:\n        if n & 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n >>= 1\n    return result"
            ]
          }
        ]
      },
      "metrics": {
        "pass_at_1_n1": 0.0,
        "avg_ratio_n1": 0.0,
        "avg_passed_n1": 0.0,
        "avg_total_n1": 1.0,
        "pass_at_1_n4": 0.0,
        "avg_ratio_n4": 0.0,
        "avg_passed_n4": 0.0,
        "avg_total_n4": 1.0,
        "best_pass_at_1": 0.0
      }
    }
  },
  "final_metrics": {
    "best_pass_at_1": 0.0,
    "avg_pass_at_1": 0.0,
    "best_ratio": 0.0,
    "avg_ratio": 0.0,
    "total_cycles": 2
  }
}